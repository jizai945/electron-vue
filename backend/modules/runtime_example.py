runtime_txt = '''

/* File generated by gen_cfile.py. Should not be modified. */

#include "CanSlave.h"
#include "rtthread.h"
/**************************************************************************/
/* Declaration of mapped variables                                        */
/**************************************************************************/

static scanIndexExternOD_t  scanIndexExternOD;
static restoreParam_t restoreUserParam; 
/**************************************************************************/
/* Declaration of value range types                                       */
/**************************************************************************/

#define valueRange_EMC 0x9F /* Type for index 0x1003 subindex 0x00 (only set of value 0 is possible) */
UNS32 SlaveApp_valueRangeTest (UNS8 typeValue, void * value)
{
	switch (typeValue) {
    case valueRange_EMC:
        if (*(UNS8*)value != (UNS8)0) return OD_VALUE_RANGE_EXCEEDED;
        break;
	}
	return 0;
}

/**************************************************************************/
/* The node id                                                            */
/**************************************************************************/
/* node_id default value.*/
UNS8 SlaveApp_bDeviceNodeId = CAN_ID;

/**************************************************************************/
/* Array of message processing information */

const UNS8 SlaveApp_iam_a_slave = 1;

TIMER_HANDLE SlaveApp_heartBeatTimers[1] = {TIMER_NONE};

#define OD_PARAM_INIT  {
	/*OD_PARAM_INIT*/
}

typedef struct 
{
	/*typedef struct*/
}od_t;

static const od_t od_default_data = OD_PARAM_INIT;

static od_t od ;




/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

															 OBJECT DICTIONARY

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

/*OBJECT DICTIONARY*/
/**************************************************************************/
/* Declaration of pointed variables                                       */
/**************************************************************************/

static const indextable SlaveApp_objdict[] = 
{
	/*indextable*/
};

const indextable * SlaveApp_scanIndexOD (UNS16 wIndex, UNS32 * errorCode, ODCallback_t **callbacks)
{
	int i;
	*callbacks = NULL;
	switch(wIndex){
/*scan index od*/
		default:
			if (scanIndexExternOD != NULL)
			{
				return scanIndexExternOD(wIndex,errorCode,callbacks);
			}
			else
			{
				*errorCode = OD_NO_SUCH_OBJECT;
				return NULL;
			}
			
			
	}
	*errorCode = OD_SUCCESSFUL;
	return &SlaveApp_objdict[i];
}

/*  ///xxx 如何动态开辟这个数组大小
 * To count at which received SYNC a PDO must be sent.
 * Even if no pdoTransmit are defined, at least one entry is computed
 * for compilations issues.
 */
s_PDO_status SlaveApp_PDO_status[4] = {s_PDO_status_Initializer,s_PDO_status_Initializer,s_PDO_status_Initializer,s_PDO_status_Initializer};

const quick_index SlaveApp_firstIndex = {
	/*quick first*/
};

const quick_index SlaveApp_lastIndex = {
	/*quick last*/
};

quick_index  SlaveApp_firstExternIndex = {
	0, /* SDO_SVR */
	0, /* SDO_CLT */
	0, /* PDO_RCV */
	0, /* PDO_RCV_MAP */
	0, /* PDO_TRS */
	0, /* PDO_TRS_MAP */
	0, /* SAM_PDO_SCAN_LIST */
	0  /* SAM_PDO_DISP_LIST */
};
quick_index  SlaveApp_lastExternIndex = {
	0, /* SDO_SVR */
	0, /* SDO_CLT */
	0, /* PDO_RCV */
	0, /* PDO_RCV_MAP */
	0, /* PDO_TRS */
	0, /* PDO_TRS_MAP */
	0, /* SAM_PDO_SCAN_LIST */
	0  /* PDO_TRS_MAP */
};

quick_index  SlaveApp_firstNewIndex = {
	0, /* SDO_SVR */
	0, /* SDO_CLT */
	0, /* PDO_RCV */
	0, /* PDO_RCV_MAP */
	0, /* PDO_TRS */
	0, /* PDO_TRS_MAP */
	0, /* SAM_PDO_SCAN_LIST */
	0  /* SAM_PDO_DISP_LIST */
};
quick_index  SlaveApp_lastNewIndex = {
	0, /* SDO_SVR */
	0, /* SDO_CLT */
	0, /* PDO_RCV */
	0, /* PDO_RCV_MAP */
	0, /* PDO_TRS */
	0, /* PDO_TRS_MAP */
	0, /* SAM_PDO_SCAN_LIST */
	0  /* PDO_TRS_MAP */
};

indextable * SlaveApp_QuickObjdict = NULL; 

const UNS16 SlaveApp_ObjdictSize = sizeof(SlaveApp_objdict)/sizeof(SlaveApp_objdict[0]); 
// # define OBJ_STR  objdict_str.SlaveApp
CO_Data SlaveApp_Data = CANOPEN_NODE_DATA_INITIALIZER(SlaveApp,od.SlaveApp);

typedef struct 
{
	indextable * externObj;
	int32_t len;
}ExternObject_t;



static getExternObject_t getExternObject;
/**
 * @brief Get the Quick Extern Obj object 
 * 
 * @param quick_num ： 快速查找元素序号
 * @return indextable* 
 */
indextable * getQuickExternObj(int16_t quick_num)
{
	ExternObject_t ExtrenOject;

	if(getExternObject == NULL)
	{ 
		return NULL;
	}

	ExtrenOject.externObj = getExternObject(&ExtrenOject.len);
	if (quick_num == 0 || quick_num >= ExtrenOject.len)
	{
		return NULL;
	}
	else 
	{
		return &ExtrenOject.externObj[quick_num]; /* 返回外部字典 quick_num 项的地址 */
	}

}


void registerExternODScanner(scanIndexExternOD_t scanFunc,getExternObject_t objectFunc,restoreParam_t restore,quick_index first_index,quick_index last_index)
{
	if(scanFunc != NULL && objectFunc != NULL)
	{
		scanIndexExternOD = scanFunc;
		getExternObject = objectFunc;
		restoreUserParam = restore;
		rt_memmove(&SlaveApp_firstExternIndex,&first_index,sizeof(quick_index));
		rt_memmove(&SlaveApp_lastExternIndex,&last_index,sizeof(quick_index));
	}
	buildQuickObject(*(SlaveApp_Data.bDeviceNodeId));
}

static uint16_t calculateNumofQuickObject(uint16_t first, uint16_t last)
{
	uint16_t result = 0;

	if (first != 0 && last != 0 && first <= last)
	{
		result = last - first+1;
	}
	return result;
}



#define EXTERN_OBJECT 0
#define LOCAL_OBJECT  1 
static uint16_t buildSubQuickObject(uint16_t first, uint16_t last, indextable * desk,UNS8 type)
{
	int ret = 0;
	indextable * src = NULL;

	if (first != 0 && last != 0 && last >= first)
	{
		for (int i=first; i<=last; i++)
		{
			if ( type == EXTERN_OBJECT)
			{
				src = getQuickExternObj(i);
			}
			else 
			{
				src = &SlaveApp_objdict[i];
			}

			rt_memmove(desk,src,sizeof(indextable));
			desk++;
			ret ++;
		}
	}
	return ret;
}

void buildQuickObject(UNS8 nodeid)
{
	int numSdoSvr;
	int numSdoClt;
	int numPdoRcv;
	int numPdoRcvMap;
	int numPdoTrs;
	int numPdoTrsMap;
	int numSamPdoScanList;
	int numSamPdoDispList;
	int numQuick;

	int countIndex = 0; /* 重新排序之后的序号 */

	indextable * tempobjdict = NULL;

	int res;
	/* 计算需要构建的总数 */

	/* 构建本地快速对象字典 */
	numSdoSvr = calculateNumofQuickObject(SlaveApp_firstIndex.SDO_SVR,SlaveApp_lastIndex.SDO_SVR);
	numSdoClt = calculateNumofQuickObject(SlaveApp_firstIndex.SDO_CLT,SlaveApp_lastIndex.SDO_CLT);
	numPdoRcv = calculateNumofQuickObject(SlaveApp_firstIndex.PDO_RCV,SlaveApp_lastIndex.PDO_RCV);
	numPdoRcvMap = calculateNumofQuickObject(SlaveApp_firstIndex.PDO_RCV_MAP,SlaveApp_lastIndex.PDO_RCV_MAP);
	numPdoTrs = calculateNumofQuickObject(SlaveApp_firstIndex.PDO_TRS,SlaveApp_lastIndex.PDO_TRS);
	numPdoTrsMap = calculateNumofQuickObject(SlaveApp_firstIndex.PDO_TRS_MAP,SlaveApp_lastIndex.PDO_TRS_MAP);
	numSamPdoScanList = calculateNumofQuickObject(SlaveApp_firstIndex.SAM_PDO_SCAN_LIST,SlaveApp_lastIndex.SAM_PDO_SCAN_LIST);
	numSamPdoDispList = calculateNumofQuickObject(SlaveApp_firstIndex.SAM_PDO_DISP_LIST,SlaveApp_lastIndex.SAM_PDO_DISP_LIST);

	numSdoSvr += calculateNumofQuickObject(SlaveApp_firstExternIndex.SDO_SVR,SlaveApp_lastExternIndex.SDO_SVR);
	numSdoClt += calculateNumofQuickObject(SlaveApp_firstExternIndex.SDO_CLT,SlaveApp_lastExternIndex.SDO_CLT);
	numPdoRcv += calculateNumofQuickObject(SlaveApp_firstExternIndex.PDO_RCV,SlaveApp_lastExternIndex.PDO_RCV);
	numPdoRcvMap += calculateNumofQuickObject(SlaveApp_firstExternIndex.PDO_RCV_MAP,SlaveApp_lastExternIndex.PDO_RCV_MAP);
	numPdoTrs += calculateNumofQuickObject(SlaveApp_firstExternIndex.PDO_TRS,SlaveApp_lastExternIndex.PDO_TRS);
	numPdoTrsMap += calculateNumofQuickObject(SlaveApp_firstExternIndex.PDO_TRS_MAP,SlaveApp_lastExternIndex.PDO_TRS_MAP);
	numSamPdoScanList += calculateNumofQuickObject(SlaveApp_firstExternIndex.SAM_PDO_SCAN_LIST,SlaveApp_lastExternIndex.SAM_PDO_SCAN_LIST);
	numSamPdoDispList += calculateNumofQuickObject(SlaveApp_firstExternIndex.SAM_PDO_DISP_LIST,SlaveApp_lastExternIndex.SAM_PDO_DISP_LIST);

	numQuick = numSdoSvr + numSdoClt + numPdoRcv  + numPdoRcvMap + numPdoTrs + numPdoTrsMap + numSamPdoScanList + numSamPdoDispList;

	rt_free(SlaveApp_QuickObjdict);
	SlaveApp_QuickObjdict = (indextable *)rt_malloc(sizeof(indextable) *  (numQuick + 1));
	
	tempobjdict = SlaveApp_QuickObjdict;
	tempobjdict ++; // 第一个参数为null

	res= buildSubQuickObject(SlaveApp_firstIndex.SDO_SVR,SlaveApp_lastIndex.SDO_SVR,tempobjdict,LOCAL_OBJECT);
	if(res != 0)
	{
		SlaveApp_firstNewIndex.SDO_SVR = 1; /* 参数从第一个开始，第零个为null */
		SlaveApp_lastNewIndex.SDO_SVR = countIndex +res; 
		tempobjdict += res;
		countIndex += res;
	}
	res= buildSubQuickObject(SlaveApp_firstExternIndex.SDO_SVR,SlaveApp_lastExternIndex.SDO_SVR,tempobjdict,EXTERN_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_lastNewIndex.SDO_SVR += res; 
		countIndex += res;
	}
	res = buildSubQuickObject(SlaveApp_firstIndex.SDO_CLT,SlaveApp_lastIndex.SDO_CLT,tempobjdict,LOCAL_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_firstNewIndex.SDO_CLT = countIndex + 1; /* 内部保存连续 */ 
		SlaveApp_lastNewIndex.SDO_CLT = countIndex+res;
		countIndex += res;
	}
	res = buildSubQuickObject(SlaveApp_firstExternIndex.SDO_CLT,SlaveApp_firstExternIndex.SDO_CLT,tempobjdict,EXTERN_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_lastNewIndex.SDO_CLT += res;
		countIndex += res;
	}
	res = buildSubQuickObject(SlaveApp_firstIndex.PDO_RCV,SlaveApp_lastIndex.PDO_RCV,tempobjdict,LOCAL_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_firstNewIndex.PDO_RCV = countIndex+1; /* 内部保存连续 */ 
		SlaveApp_lastNewIndex.PDO_RCV = countIndex+res;
		countIndex += res;
	}
	res = buildSubQuickObject(SlaveApp_firstExternIndex.PDO_RCV,SlaveApp_firstExternIndex.PDO_RCV,tempobjdict,EXTERN_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_lastNewIndex.PDO_RCV += res;
		countIndex += res;
	}
	res = buildSubQuickObject(SlaveApp_firstIndex.PDO_RCV_MAP,SlaveApp_lastIndex.PDO_RCV_MAP,tempobjdict,LOCAL_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_firstNewIndex.PDO_RCV_MAP = countIndex+1; /* 内部保存连续 */ 
		SlaveApp_lastNewIndex.PDO_RCV_MAP = countIndex+res;
		countIndex += res;
	}
	res = buildSubQuickObject(SlaveApp_firstExternIndex.PDO_RCV_MAP,SlaveApp_firstExternIndex.PDO_RCV_MAP,tempobjdict,EXTERN_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_lastNewIndex.PDO_RCV_MAP += res;
		countIndex += res;
	}  
	res = buildSubQuickObject(SlaveApp_firstIndex.PDO_TRS,SlaveApp_lastIndex.PDO_TRS,tempobjdict,LOCAL_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_firstNewIndex.PDO_TRS = countIndex+1; /* 内部保存连续 */ 
		SlaveApp_lastNewIndex.PDO_TRS = countIndex+res;
		countIndex += res;
	}
	res = buildSubQuickObject(SlaveApp_firstExternIndex.PDO_TRS,SlaveApp_firstExternIndex.PDO_TRS,tempobjdict,EXTERN_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_lastNewIndex.PDO_TRS += res;
		countIndex += res;
	}  
	res = buildSubQuickObject(SlaveApp_firstIndex.PDO_TRS_MAP,SlaveApp_lastIndex.PDO_TRS_MAP,tempobjdict,LOCAL_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_firstNewIndex.PDO_TRS_MAP = countIndex+1; /* 内部保存连续 */ 
		SlaveApp_lastNewIndex.PDO_TRS_MAP = countIndex+res;
		countIndex += res;
	}  
	res = buildSubQuickObject(SlaveApp_firstExternIndex.PDO_TRS_MAP,SlaveApp_firstExternIndex.PDO_TRS_MAP,tempobjdict,EXTERN_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_lastNewIndex.PDO_TRS_MAP += res;
		countIndex += res;
	} 
	res = buildSubQuickObject(SlaveApp_firstIndex.SAM_PDO_SCAN_LIST,SlaveApp_lastIndex.SAM_PDO_SCAN_LIST,tempobjdict,LOCAL_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_firstNewIndex.SAM_PDO_SCAN_LIST = countIndex+1; /* 内部保存连续 */ 
		SlaveApp_lastNewIndex.SAM_PDO_SCAN_LIST = countIndex+res;
		countIndex += res;
	} 
	res = buildSubQuickObject(SlaveApp_firstExternIndex.SAM_PDO_SCAN_LIST,SlaveApp_firstExternIndex.SAM_PDO_SCAN_LIST,tempobjdict,EXTERN_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_lastNewIndex.SAM_PDO_SCAN_LIST += res;
		countIndex += res;
	}   
	res = buildSubQuickObject(SlaveApp_firstIndex.SAM_PDO_DISP_LIST,SlaveApp_lastIndex.SAM_PDO_DISP_LIST,tempobjdict,LOCAL_OBJECT);
	if(res != 0)
	{
		tempobjdict += res;
		SlaveApp_firstNewIndex.SAM_PDO_DISP_LIST = countIndex+1; /* 内部保存连续 */ 
		SlaveApp_lastNewIndex.SAM_PDO_DISP_LIST = countIndex+res;
		countIndex += res;
	}   
	res = buildSubQuickObject(SlaveApp_firstExternIndex.SAM_PDO_DISP_LIST,SlaveApp_firstExternIndex.SAM_PDO_DISP_LIST,tempobjdict,EXTERN_OBJECT);
	if(res != 0)
	{
		SlaveApp_lastNewIndex.SAM_PDO_DISP_LIST += res;
	}    

	 SlaveApp_Data.quickObjdict = SlaveApp_QuickObjdict; // 构建后赋值给全局数据

	//  setNodeId(&SlaveApp_Data, nodeid);
	rt_memcpy(&od,&od_default_data,sizeof(od));
}



void objdictIterate(UNS8 access,ODInfo_t od,void * param)
{
	uint16_t len;
	uint8_t subidx_num; /* 索引中子索引的个数 */
	indextable * first_OD;


	first_OD = &SlaveApp_objdict[0];
	len = sizeof(SlaveApp_objdict)/sizeof(indextable);

	/* 扫描内部对象字典 */
	for (int i=0; i<len; i++)
	{
		subidx_num = first_OD[i].bSubCount;
		for (int j=0; j < subidx_num; j++)
		{
			if ((first_OD[i].pSubindex[j].bAccessType & access) == access || access == 0xff)
			{
				od(first_OD[i].index,j,first_OD[i].pSubindex[j].size,first_OD[i].pSubindex[j].bDataType,param);
			}
		}
	}

	if (getExternObject != RT_NULL)
	{
		first_OD = getExternObject(&len);
		/* 扫描内部外部字典 */
		for (int i=0; i<len; i++)
		{
			subidx_num = first_OD[i].bSubCount;
			for (int j=0; j < subidx_num; j++)
			{
				if ((first_OD[i].pSubindex[j].bAccessType & access) == access || access == 0xff)
				{
					od(first_OD[i].index,j,first_OD[i].pSubindex[j].size,first_OD[i].pSubindex[j].bDataType,param);
				}
			}
		}
	}
}

/**
 * @brief 恢复runtime的默认值
 * 
 */
static void ObjDictRestoreRuntimeDefaultParam(void)
{
	rt_memcpy(&od,&od_default_data,sizeof(od));
}

/**
 * @brief 恢复默认值，为了节省flash控件，在canopen初始化前要调用一下恢复all
 * 
 * @param[in] param 恢复 all/runtime/user 参数默认值
 */
void ObjDictRestoreDefaultParam(restrore_default_t param)
{
	if (param == RESTORE_ALL)
	{
		ObjDictRestoreRuntimeDefaultParam();
		if (restoreUserParam != RT_NULL)
		{
			restoreUserParam();
		}
	}
	else if (param == RESTORE_RUNTIME)
	{
		ObjDictRestoreRuntimeDefaultParam();
	}
	else if (param == RESTORE_USER)
	{
		if (restoreUserParam != RT_NULL)
		{
			restoreUserParam();
		}
	}
}


'''